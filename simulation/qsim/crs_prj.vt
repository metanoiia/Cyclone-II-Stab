// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2021 21:32:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	CLOCK_50,
	GPIO_1,
	KEY,
	miso_,
	sampler_tx
);
input  CLOCK_50;
input [3:0] GPIO_1;
input [3:0] KEY;
input  miso_;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK_50 or GPIO_1 or KEY or miso_)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	GPIO_1,
	cs_,
	mosi_,
	rdy,
	rx_dv_o,
	sclk_,
	tx_dv_o,
	sampler_rx
);
input [3:0] GPIO_1;
input  cs_;
input  mosi_;
input  rdy;
input  rx_dv_o;
input  sclk_;
input  tx_dv_o;
input sampler_rx;

reg [3:0] GPIO_1_expected;
reg  cs__expected;
reg  mosi__expected;
reg  rdy_expected;
reg  rx_dv_o_expected;
reg  sclk__expected;
reg  tx_dv_o_expected;

reg [3:0] GPIO_1_prev;
reg  cs__prev;
reg  mosi__prev;
reg  rdy_prev;
reg  rx_dv_o_prev;
reg  sclk__prev;
reg  tx_dv_o_prev;

reg [3:0] GPIO_1_expected_prev;
reg  cs__expected_prev;
reg  mosi__expected_prev;
reg  rdy_expected_prev;
reg  rx_dv_o_expected_prev;
reg  sclk__expected_prev;
reg  tx_dv_o_expected_prev;

reg [3:0] last_GPIO_1_exp;
reg  last_cs__exp;
reg  last_mosi__exp;
reg  last_rdy_exp;
reg  last_rx_dv_o_exp;
reg  last_sclk__exp;
reg  last_tx_dv_o_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	GPIO_1_prev = GPIO_1;
	cs__prev = cs_;
	mosi__prev = mosi_;
	rdy_prev = rdy;
	rx_dv_o_prev = rx_dv_o;
	sclk__prev = sclk_;
	tx_dv_o_prev = tx_dv_o;
end

// update expected /o prevs

always @(trigger)
begin
	GPIO_1_expected_prev = GPIO_1_expected;
	cs__expected_prev = cs__expected;
	mosi__expected_prev = mosi__expected;
	rdy_expected_prev = rdy_expected;
	rx_dv_o_expected_prev = rx_dv_o_expected;
	sclk__expected_prev = sclk__expected;
	tx_dv_o_expected_prev = tx_dv_o_expected;
end



// expected cs_
initial
begin
	cs__expected = 1'bX;
end 

// expected mosi_
initial
begin
	mosi__expected = 1'bX;
end 

// expected sclk_
initial
begin
	sclk__expected = 1'bX;
end 

// expected tx_dv_o
initial
begin
	tx_dv_o_expected = 1'bX;
end 

// expected rx_dv_o
initial
begin
	rx_dv_o_expected = 1'bX;
end 

// expected rdy
initial
begin
	rdy_expected = 1'bX;
end 
// generate trigger
always @(GPIO_1_expected or GPIO_1 or cs__expected or cs_ or mosi__expected or mosi_ or rdy_expected or rdy or rx_dv_o_expected or rx_dv_o or sclk__expected or sclk_ or tx_dv_o_expected or tx_dv_o)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected GPIO_1 = %b | expected cs_ = %b | expected mosi_ = %b | expected rdy = %b | expected rx_dv_o = %b | expected sclk_ = %b | expected tx_dv_o = %b | ",GPIO_1_expected_prev,cs__expected_prev,mosi__expected_prev,rdy_expected_prev,rx_dv_o_expected_prev,sclk__expected_prev,tx_dv_o_expected_prev);
	$display("| real GPIO_1 = %b | real cs_ = %b | real mosi_ = %b | real rdy = %b | real rx_dv_o = %b | real sclk_ = %b | real tx_dv_o = %b | ",GPIO_1_prev,cs__prev,mosi__prev,rdy_prev,rx_dv_o_prev,sclk__prev,tx_dv_o_prev);
`endif
	if (
		( GPIO_1_expected_prev[0] !== 1'bx ) && ( GPIO_1_prev[0] !== GPIO_1_expected_prev[0] )
		&& ((GPIO_1_expected_prev[0] !== last_GPIO_1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[0] = GPIO_1_expected_prev[0];
	end
	if (
		( GPIO_1_expected_prev[1] !== 1'bx ) && ( GPIO_1_prev[1] !== GPIO_1_expected_prev[1] )
		&& ((GPIO_1_expected_prev[1] !== last_GPIO_1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[1] = GPIO_1_expected_prev[1];
	end
	if (
		( GPIO_1_expected_prev[2] !== 1'bx ) && ( GPIO_1_prev[2] !== GPIO_1_expected_prev[2] )
		&& ((GPIO_1_expected_prev[2] !== last_GPIO_1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[2] = GPIO_1_expected_prev[2];
	end
	if (
		( GPIO_1_expected_prev[3] !== 1'bx ) && ( GPIO_1_prev[3] !== GPIO_1_expected_prev[3] )
		&& ((GPIO_1_expected_prev[3] !== last_GPIO_1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GPIO_1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GPIO_1_expected_prev);
		$display ("     Real value = %b", GPIO_1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_GPIO_1_exp[3] = GPIO_1_expected_prev[3];
	end
	if (
		( cs__expected_prev !== 1'bx ) && ( cs__prev !== cs__expected_prev )
		&& ((cs__expected_prev !== last_cs__exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cs_ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cs__expected_prev);
		$display ("     Real value = %b", cs__prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cs__exp = cs__expected_prev;
	end
	if (
		( mosi__expected_prev !== 1'bx ) && ( mosi__prev !== mosi__expected_prev )
		&& ((mosi__expected_prev !== last_mosi__exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mosi_ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mosi__expected_prev);
		$display ("     Real value = %b", mosi__prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_mosi__exp = mosi__expected_prev;
	end
	if (
		( rdy_expected_prev !== 1'bx ) && ( rdy_prev !== rdy_expected_prev )
		&& ((rdy_expected_prev !== last_rdy_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdy_expected_prev);
		$display ("     Real value = %b", rdy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_rdy_exp = rdy_expected_prev;
	end
	if (
		( rx_dv_o_expected_prev !== 1'bx ) && ( rx_dv_o_prev !== rx_dv_o_expected_prev )
		&& ((rx_dv_o_expected_prev !== last_rx_dv_o_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rx_dv_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rx_dv_o_expected_prev);
		$display ("     Real value = %b", rx_dv_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_rx_dv_o_exp = rx_dv_o_expected_prev;
	end
	if (
		( sclk__expected_prev !== 1'bx ) && ( sclk__prev !== sclk__expected_prev )
		&& ((sclk__expected_prev !== last_sclk__exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sclk_ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sclk__expected_prev);
		$display ("     Real value = %b", sclk__prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_sclk__exp = sclk__expected_prev;
	end
	if (
		( tx_dv_o_expected_prev !== 1'bx ) && ( tx_dv_o_prev !== tx_dv_o_expected_prev )
		&& ((tx_dv_o_expected_prev !== last_tx_dv_o_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tx_dv_o :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tx_dv_o_expected_prev);
		$display ("     Real value = %b", tx_dv_o_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_tx_dv_o_exp = tx_dv_o_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_50;
reg [3:0] treg_GPIO_1;
reg [3:0] KEY;
reg miso_;
// wires                                               
wire [3:0] GPIO_1;
wire cs_;
wire mosi_;
wire rdy;
wire rx_dv_o;
wire sclk_;
wire tx_dv_o;

wire sampler;                             

// assign statements (if any)                          
assign GPIO_1 = treg_GPIO_1;
top i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.cs_(cs_),
	.miso_(miso_),
	.mosi_(mosi_),
	.rdy(rdy),
	.rx_dv_o(rx_dv_o),
	.sclk_(sclk_),
	.tx_dv_o(tx_dv_o)
);

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #5000 1'b1;
	#5000;
end 
// GPIO_1[ 3 ]
initial
begin
	treg_GPIO_1[3] = 1'bZ;
end 
// GPIO_1[ 2 ]
initial
begin
	treg_GPIO_1[2] = 1'bZ;
end 
// GPIO_1[ 1 ]
initial
begin
	treg_GPIO_1[1] = 1'bZ;
end 
// GPIO_1[ 0 ]
initial
begin
	treg_GPIO_1[0] = 1'bZ;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b0;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b0;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
	KEY[0] = #20000 1'b1;
end 

// miso_
initial
begin
	miso_ = 1'b0;
	miso_ = #330000 1'b1;
	miso_ = #350000 1'b0;
end 

top_vlg_sample_tst tb_sample (
	.CLOCK_50(CLOCK_50),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.miso_(miso_),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.GPIO_1(GPIO_1),
	.cs_(cs_),
	.mosi_(mosi_),
	.rdy(rdy),
	.rx_dv_o(rx_dv_o),
	.sclk_(sclk_),
	.tx_dv_o(tx_dv_o),
	.sampler_rx(sampler)
);
endmodule

